// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch" , "fullTextIndex"]
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String  @db.String
  description String? @db.String
  imageUrl    String? @db.String
  price       Float?
  isPublished Boolean @default(false)

  attachment Attachment[]
  chapters   Chapter[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Category   Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?    @db.ObjectId
  purchase   Purchase[]
  @@fulltext([title])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachment {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  url      String  @db.String
  Course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String  @db.String
  description String? @db.String
  videoUrl    String? @db.String
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String? @db.ObjectId

  userProgress UserProgress[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  chapterId String   @unique @db.ObjectId
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String?  @db.ObjectId

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, courseId])
  @@index([courseId])

}
model StripeCustomer {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
